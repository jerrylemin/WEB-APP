<main class="relative">
    <div class="full-info hidden bg-black/80 backdrop-blur-sm z-50 fixed inset-0">
        <div class="full-info-cnt bg-cream rounded-lg absolute inset-10 overflow-y-scroll mx-32 my-8 px-10 py-5">
            
        </div>
    </div>
    <div class="introduction h-[calc(100vh-158px)] relative">
        <div class="p-10 flex flex-col justify-center items-center lg:absolute lg:left-[40%] lg:top-[20%] lg:w-[50%]">
            <h1 class="text-red text-bigger font-bold font-title">Brewtiful xin chào!</h1> 
            <p class="text-medium font-serif">Vui lòng lướt xuống để xem các món nước của chúng mình nhé!</p>
        </div>
        <img class="invisible lg:visible h-[100%] w-auto absolute left-[10%] top-[-10%]" src="/images/webPageResources/bg/bobacup.png" alt="Chúc bạn ngon miệng!">
    </div>
    <div class="bg-[url('/images/webPageResources/bg/bg_greenSplash.png')] bg-fixed bg-top bg-contain bg-no-repeat">
        <article class="w-9/12 mx-auto my-10">
            <div id="filter" class="w-full h-10 mb-7">
                <select id="filterByPrice">
                    <option value="all" selected>Tất cả</option>
                </select>
            </div>
            <div id="pagination" class="w-full h-10 mb-7">

            </div>
            <div class="items w-full justify-center grid grid-flow-row auto-rows-auto grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-7">
                
            </div>
        </article>
    </div>
</main>
<style>
.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    list-style: none;
    padding: 0;
}

.pagination li {
    margin: 0 5px;
    padding: 10px 15px;
    background-color: #F29F05CC;
    color: white;
    font-weight: bold;
    border: 1px solid #ddd;
    cursor: pointer;
    user-select: none;
}

.pagination li.active {
    background-color: #F23A29;
    color: white;
    font-weight: bold;
    border: 1px solid #F23A29;
}

.pagination li.disabled {
    pointer-events: none;
}

</style>
<script>
    var currPage = 1;
    var totalPages = null;
    var searchQuery = "<%= searchQuery %>";
    var category = "<%= category %>";
    var filterByPrice = false;
    var minPrice = null;
    var maxPrice = null;
    var currentFetchFunc = fetchByPage;
    
    if(searchQuery) {
        currentFetchFunc = fetchBySearch;
    }
    else if(category) {
        currentFetchFunc = fetchByCategory;
    }

    async function getPriceRange() {
        const response = await fetch("https://localhost:5000/products/price/range");
        let {min, max} = await response.json();
        minPrice = min;
        maxPrice = max;
    }

    async function fetchByPage() {
        console.log(currPage);
        const response = await fetch(`https://localhost:5000/products/page/${currPage}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({filterByPrice, minPrice, maxPrice})
        });
        let result = await response.json();
        // console.log(result)
        totalPages = result.totalPages;
        return result.products;
    }

    async function fetchBySearch() {
        const response = await fetch(`https://localhost:5000/products/search/${currPage}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                q: searchQuery,
                filterByPrice,
                minPrice,
                maxPrice
            })
        });
        let result = await response.json();
        totalPages = result.totalPages;
        return result.products;
    }

    async function fetchByCategory() {
        const response = await fetch(`https://localhost:5000/products/category/page/${currPage}?category=${category}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({filterByPrice, minPrice, maxPrice})
        });
        let result = await response.json();
        totalPages = result.totalPages;
        return result.products;
    }

    async function switchPage() {
        try {
            const products = await currentFetchFunc();
            createPagination();
            const container = document.querySelector(".items");
            container.innerHTML = "";
            products.forEach((p) => {
                container.innerHTML += `
                    <div data-product-id="${p._id}" class="productCard group bg-yellow/50 border border-yellow/50 rounded-outer p-1 backdrop-blur-lg flex flex-col justify-between transition-transform transition-shadow duration-200 hover:shadow-lg hover:scale-110 relative">
                        <div class="absolute inset-0 pointer-events-none tr  ansition-opacity opacity-0 group-hover:opacity-100 duration-200 from-yellow/20 to-white/20"></div>
                        <div class="info h-3/4">
                            <img class="w-full rounded-inner aspect-square" src="/${p.image}" alt="">
                            <p class="font-bold font-serif text-medium">${p.name}</p>
                            <p class="font-serif text-medium">${p.price}đ</p>
                        </div>
                        <div class="flex justify-center cursor-pointer">
                            <div class="bttn rounded-full bg-red w-[40px] h-[40px] flex justify-center items-center">
                                <i class="fa-solid fa-plus text-white"></i>
                            </div>
                        </div>
                    </div>
                `;
            });
        }
        catch(err) {
            console.log(err);
        }
    }

    function createPagination() {
        const pagination = document.getElementById("pagination");
        pagination.innerHTML = ""; // Reset nội dung cũ
        const ul = document.createElement("ul");
        ul.classList.add("pagination");

        // Tạo nút Previous
        const prev = document.createElement("li");
        prev.textContent = "Previous";
        if(currPage === 1) {
            prev.classList.add("disabled");
        }
        prev.onclick = () => {
            if (currPage > 1) {
                currPage--;
                switchPage(currPage);
            }
        };
        ul.appendChild(prev);

        // Tính toán nút chuyển trang min và nút chuyển trang max
        const startPage = Math.max(1, currPage - 2);
        const endPage = Math.min(totalPages, currPage + 2);
        
        // Nếu nút chuyển trang bắt đầu từ 1 thì không cần thêm vào ... ở trước đó nữa
        if(startPage !== 1) {
            const manyPrev = document.createElement("li");
            manyPrev.textContent = "…";
            manyPrev.classList.add("disabled");
            ul.appendChild(manyPrev);
        }
        
        // Hiển thị 2 nút bên trái và 2 nút bên phải
        for (let i = startPage; i <= endPage; i++) {
            const li = document.createElement("li");
            li.textContent = i;

            if (i === currPage) {
                li.classList.add("active");
            } else {
                li.onclick = () => {
                    currPage = i;
                    switchPage(currPage);
                };
            }
            ul.appendChild(li);
        }

        // Nếu nút chuyển trang kết thúc bằng totalPages thì không cần thêm vào ... ở sau đó nữa
        if(endPage !== totalPages) {
            const manyNext = document.createElement("li");
            manyNext.textContent = "…";
            manyNext.classList.add("disabled");
            ul.appendChild(manyNext);
        }

        // Tạo nút Next
        const next = document.createElement("li");
        next.textContent = "Next";
        if(currPage === totalPages) {
            next.classList.add("disabled");
        }
        next.onclick = () => {
            if (currPage < totalPages) {
                currPage++;
                switchPage(currPage);
            };
        };
        ul.appendChild(next);

        // Thêm vào DOM
        pagination.appendChild(ul);
    }

    document.addEventListener("DOMContentLoaded", (e) => {
        // Khởi tạo các tùy chọn filter by price
        getPriceRange().then(() => {
            const select = document.querySelector("#filterByPrice");
            const priceRanges = [];
            let min = minPrice;
            while(min <= maxPrice) {
                priceRanges.push([min, min + 10000]);
                min += 10000;
            }
            priceRanges.forEach((range) => {
                const option = document.createElement("option");
                option.value = `${range[0]}-${range[1]}`;
                option.textContent = `${range[0]} - ${range[1]}`;
                select.appendChild(option);
            });
    
            // Bắt sự kiện "khi bộ lọc thay đổi"
            document.querySelector("#filterByPrice").onchange = (e) => {
                currPage = 1;
                const value = e.target.value;
                if(value !== "all") {
                    filterByPrice = true;
                    const range = value.split('-');
                    minPrice = parseInt(range[0]);
                    maxPrice = parseInt(range[1]);
                }
                else {
                    filterByPrice = false;
                    minPrice = null;
                    maxPrice = null;
                }
                switchPage();
            }
        });

        // Khởi tạo thanh pagination
        createPagination();
        switchPage(currPage).then(() => {
            const bttns = document.querySelectorAll(".bttn");
            bttns.forEach(async (bttn) => {
                bttn.addEventListener("click", async (e) => {
                    e.preventDefault();
                    const productId = bttn.parentNode.parentNode.getAttribute("data-product-id");
                    try {
                        const res = await fetch(`/cart/add/${productId}`, { method: 'POST' });
                        const noti = await res.json();
                        showNotification(noti.message);
                    } 
                    catch(e) {
                        console.log(e);
                    }
                });
            });
    
            document.querySelectorAll(".productCard").forEach((parent) => {
                parent.addEventListener("click", async (e) => {
                    if(!e.target.classList.contains("bttn")) {
                        try {
                            const prod = await fetch(`https://localhost:5000/products/id/${parent.getAttribute("data-product-id")}`);
                            const resProd = await prod.json();
                            const relatedProds = await fetch(`https://localhost:5000/products/id/${parent.getAttribute("data-product-id")}/related`);
                            const resRelated = await relatedProds.json();
                            document.querySelector(".full-info-cnt").innerHTML = `
                                <h1 class="text-center text-big text-red font-serif font-bold">${resProd.name}</h1>
                                <div class="flex justify-center m-4">
                                    <img class="rounded-inner aspect-square w-1/2" src="/${resProd.image}" alt="">
                                </div>
                                <p class="text-medium font-serif"><b>Mô tả</b>: ${resProd.description}</p>
                                <p class="text-medium font-serif"><b>Phân loại</b>: ${resProd.category}</p>
                                <p class="text-medium font-serif"><b>Kho</b>: ${resProd.stock}</p>
                                <p class="text-medium font-serif"><b>Giá</b>: ${resProd.price}đ</p>
                                <p class="text-medium font-serif md-3"><b>Sản phẩm có liên quan</b>:</p>
                                <div class="related grid grid-rows-1 grid-cols-3 gap-3 overflow-x-auto">
                                    
                                </div>
                            `;
                            const relatedSection = document.querySelector(".related");
                            resRelated.data.forEach(related => {
                                relatedSection.innerHTML += `
                                    <div class="w-full bg-yellow/50 border border-yellow/50 rounded-outer p-1 relative">
                                        <img class="w-full rounded-inner aspect-square" src="/${related.image}" alt="">
                                        <p class="font-bold font-serif text-medium">${related.name}</p>
                                        <p class="font-serif text-medium">${related.price}đ</p>
                                    </div>
                                `;
                            });
                            document.querySelector(".full-info").classList.toggle("hidden");
                        }
                        catch(e) {
                            console.log(e);
                        }
                    }
                });
            });
        });
    
        document.querySelector(".full-info").addEventListener("click", (e) => {
            if(!e.target.closest(".full-info-cnt")) {
                document.querySelector(".full-info").classList.toggle("hidden");
            }
        });
});

</script>
<!-- <% if(!searchQuery) { %>
    <script src="/js/products.js"></script>
<% } else { %> 
    <script src="/js/searchedProducts.js"></script>
<% } %> -->

